package com.exadel.filetree;

import java.io.File;
import java.io.FileInputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.sql.DataSource;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

//import javax.annotation.Resource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.datasource.*;
import com.mysql.jdbc.Driver;
import org.springframework.transaction.annotation.Transactional;

/**
 * Created with IntelliJ IDEA.
 * User: naXa!
 * Date: 24.06.13
 * Time: 15:36
 */
//@Repository
public class SpringDBService extends AbstractService {
    private static final String pathToPropsFile = "src\\main\\resources\\jdbc connection.properties";
    private String driverClass, url, userName, password;
    private JdbcTemplate jdbcTemplate;
//    @Autowired DataSource ds;

    public SpringDBService() {
        super();

        //Properties props = new Properties();
        //DataSource ds = null;
        //try {
            /*props.load( new FileInputStream( pathToPropsFile ) );
            driverClass   = props.getProperty( "driver" );
            url      = props.getProperty( "url" );
            userName = props.getProperty( "username" );
            password = props.getProperty( "password" );
              */
            // ?
            /*Driver driver = (Driver)Class.forName( driverClass ).newInstance();
            ds = new SimpleDriverDataSource(driver, url, userName, password);
            setDataSource( ds );*/
            //conn = DriverManager.getConnection(url, userName, password);
        /*} catch (Exception exc) {
            exc.printStackTrace();
        }                         */
    }

    public SpringDBService(String path) {
        this();

        setUpInputDir( path );
    }

    // Зачем метод?
    //@Resource
    @Autowired
    public void setDataSource(DataSource ds) {
        jdbcTemplate = new JdbcTemplate( ds );
    }

    public JdbcTemplate getJdbcTemplate() {
        return jdbcTemplate;
    }

    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    @Transactional(readOnly = true)
    public boolean wasSerialized(File dir) throws SQLException {
        int N = this.jdbcTemplate.queryForInt("SELECT COUNT(ID) FROM root_folder " +
                "WHERE (Path = ?)", dir.getAbsolutePath());
        return (N > 0);
    }

    @Override
    @Transactional(readOnly = false)
    public void saveDescription(Set<FileIndex> description, File dir) throws Exception {
        String  insertQuery  = "INSERT INTO root_folder(Path) VALUES (?)",
                insertQuery2 = "INSERT INTO file_index(Filename, LastModification, Size, Type) VALUES (?, ?, ?, ?)",
                bindQuery    = "INSERT INTO relation(MainParent, Child) VALUES (?, ?)",
                selectQuery  = "SELECT COUNT(ID) AS N FROM root_folder AS rf WHERE rf.Path LIKE ?",
                lastIDQuery  = "SELECT LAST_INSERT_ID()";
        Integer idRoot = 0, idFileIndex;

        // insert - into root_folder
        //TODO: нужна проверка, чтобы не вставлять повторяющиеся значения (попробовать добавить её в БД)
        jdbcTemplate.update( insertQuery, dir.getAbsolutePath() );
        // get last ID
        idRoot = jdbcTemplate.queryForInt( lastIDQuery );

        for (FileIndex fi : description) {
            // insert 2 - into file_index
            String filename = fi.getFilename();
            // representing date-time in string format
            SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
            String modifDateTime = sdf.format( fi.getLastModif() );
            Long size = fi.getSize();
            String type = fi.isFile()? "File" : "Directory";
            jdbcTemplate.update( insertQuery2, filename, modifDateTime, size, type );
            // get last ID
            idFileIndex = jdbcTemplate.queryForInt( lastIDQuery );

            // bind records in the two tables
            jdbcTemplate.update( bindQuery, idRoot, idFileIndex );
        }
    }

    @Override
    @Transactional(readOnly = true)
    public Set<FileIndex> loadDescription(File dir) throws Exception {
        String query =  "SELECT Filename, LastModification, Size, Type " +
                        "FROM file_index AS fi, relation AS r, root_folder AS rf " +
                        "WHERE ((fi.ID = r.Child) AND (r.MainParent = rf.ID) AND (rf.Path = ?))";

        Set<FileIndex> result = new HashSet<FileIndex>( jdbcTemplate.query(
                query,
                new RowMapper<FileIndex>() {
                    @Override
                    public FileIndex mapRow(ResultSet resultSet, int rowNum) throws SQLException {
                        FileIndex fileIndex = new FileIndex();
                        fileIndex.setFilename(resultSet.getString("Filename"));
                        fileIndex.setLastModif(resultSet.getTimestamp("LastModification"));
                        fileIndex.setFile(resultSet.getString("Type").equals("File"));
                        if (fileIndex.isFile())
                            fileIndex.setSize(resultSet.getLong("Size"));
                        return fileIndex;
                    }
                },
                dir.getAbsolutePath()) );

        return result;
    }
}
