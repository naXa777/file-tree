package com.exadel.filetree;

import java.io.File;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Set;
import java.util.HashSet;

import org.springframework.stereotype.Service;

import javax.sql.DataSource;

/**
 * Created with IntelliJ IDEA.
 * User: naXa!
 * Date: 20.06.13
 * Time: 21:38
 */
@Service
public class DBService extends AbstractService {
    DataSource ds;
    Connection conn = null;

    /**
     * Default constructor.
     */
    public DBService() {
        super();
    }

    public DataSource getDataSource() {
        return ds;
    }

    /**
     * Setter for Data Source (linked with Spring context).
     *
     * @param ds initialized data source
     */
    public void setDataSource(DataSource ds) {
        this.ds = ds;
    }

    /**
     * @param dir reference to a directory
     * @return <code>TRUE</code>, if description for directory is present in database; <code>FALSE</code> otherwise
     * @throws SQLException
     */
    @Override
    public boolean wasSerialized(File dir) throws SQLException {
        conn = ds.getConnection();//DriverManager.getConnection( url, userName, password );

        PreparedStatement stmt = conn.prepareStatement( "SELECT COUNT(ID) AS N FROM root_folder " +
                                                        "WHERE (Path = ?)" );
        stmt.setString( 1, dir.getAbsolutePath() );
        ResultSet rs = stmt.executeQuery();

        boolean result = (rs.next() && (rs.getInt("N") > 0));
        stmt.close();
        conn.close();
        return result;
    }

    /**
     * Serialization. Method writes directory description (current state) into DB.
     *
     * @param description description of directory content
     * @param dir reference to a directory
     * @throws SQLException
     */
    @Override
    public void saveDescription(Set<FileIndex> description, File dir) throws SQLException {
        String  clearQuery  = "CALL clearFolder(?)",
                insertQuery = "CALL insertFile(?, ?, ?, ?, ?)";
        String parentName = dir.getAbsolutePath();

        conn = ds.getConnection();

            // clear old file indices
        PreparedStatement stmt = conn.prepareStatement( clearQuery );
        stmt.setString( 1, parentName );
        stmt.execute();
        stmt.close();

        for (FileIndex fi : description) {
                // insert - into file_index
            stmt = conn.prepareStatement( insertQuery );
            stmt.setString( 1, fi.getFilename() );
                // saving date-time:
            SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
            String currDateTime = sdf.format( fi.getLastModif() );
            stmt.setString( 2, currDateTime );
            stmt.setLong(   3, fi.getSize() );
            stmt.setString( 4, fi.isFile()? "File" : "Directory" );
            stmt.setString( 5, parentName );
            stmt.execute();
            stmt.close();
        }

        // The End
        conn.close();
    }

    /**
     * Deserialization. Method reads previous directory state from DB,
     * and returns it as HashSet<FileIndex>.
     *
     * @param dir reference to a directory
     * @return description of directory content
     * @throws SQLException
     */
    @Override
    public Set<FileIndex> loadDescription(File dir) throws SQLException {
        Set<FileIndex> result = new HashSet<FileIndex>();
        String query =  "SELECT Filename, LastModification, Size, Type " +
                        "FROM file_index AS fi, root_folder AS rf " +
                        "WHERE ((fi.Parent = rf.ID) AND (rf.Path = ?))";

        conn = ds.getConnection(); //DriverManager.getConnection( url, userName, password );

            // select all files
        PreparedStatement stmt = conn.prepareStatement( query );
        stmt.setString( 1, dir.getAbsolutePath() );
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            String filename = rs.getString( "Filename" );
            java.util.Date lastModif = rs.getTimestamp( "LastModification" );
            String type = rs.getString( "Type" );
            Long size = 0L;
            if (type.equals("File"))
                size = rs.getLong( "Size" );

            result.add( new FileIndex( filename, lastModif, size, (type.equals("File") ) ) );
        }

        stmt.close();
        conn.close();
        return result;
    }
}
