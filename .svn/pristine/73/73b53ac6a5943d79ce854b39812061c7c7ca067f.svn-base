package com.exadel.filetree;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.String;
import java.util.Set;
import java.util.TreeSet;

//import javax.servlet.annotation.WebServlet;

/**
 * Created with IntelliJ IDEA.
 * User: naXa!
 * Date: 27.06.13
 * Time: 1:20
 */
//@WebServlet("/file-tree")
public class MainServlet extends HttpServlet {
    private static final long serialVersionUID = -6518190301785071457L;
    private String imgDir = "icon-set\\", initDir = "D:";
    private IService srvc;

    public void setImgDir(String imgDir) {
        this.imgDir = imgDir;
    }

    public void setInitDir(String initDir) {
        this.initDir = initDir;
    }

    public MainServlet() {
        ApplicationContext context = new ClassPathXmlApplicationContext( "classpath:app-context.xml" );
        srvc = (IService)context.getBean( "useThis" );
    }

    @Override
    public void init() throws ServletException {
        super.init();
    }

    @Override
    protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doPost( req, resp );
    }

    /**
     *
     * @param req Request from page
     * @param resp Response from server
     * @throws ServletException
     * @throws IOException
     */
    @Override
    protected final void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        final String headFragment = "<HTML>\n" +
                                    "<HEAD>\n" +
                                    "   <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n" +
                                    "   <title>File Browser</title>\n" +
                                    "</HEAD>\n" +
                                    "<BODY>\n" +
                                    "   <h1 class=\"page-title\">" + getMessage() + "</h1>\n" +
                                    "   <br /><br />",
                    tailFragment  = "   </table>\n" +
                                    "</BODY>\n" +
                                    "</HTML>",
                    encoding      = "UTF-8";

        resp.setContentType( "text/html" );
        resp.setCharacterEncoding( encoding );   // For proper displaying of russian characters (Cyrillic)
        PrintWriter writer = resp.getWriter();
        try {
            writer.println( headFragment );

            String dirName = req.getParameter( "path" );
            if (dirName == null || dirName.isEmpty())
                dirName = initDir;
            else
                dirName = URLDecoder.decode( dirName, encoding );
            writer.println( "<h2><img src=\"" + imgDir + "Type-Folder-Open.ico\" " +
                                    "alt=\"Opened directory \" " +
                                    "width=\"16px\" " +
                                    "height=\"16px\" />There is the content of '" + dirName + "':</h2>\n" +
                            "<table border=\"0\">");

            // logic
            TreeSet<ChangeDescription> cmpResult = null;
            try {
                File target = new File( dirName );
                Set<FileIndex> state2 = srvc.describeIt( target );

                if (srvc.wasSerialized( target )) {
                    Set<FileIndex> state1 = srvc.loadDescription( target );
                    cmpResult = (TreeSet<ChangeDescription>)srvc.compareStates( state1, state2 );
                } else {
                    cmpResult = new TreeSet<ChangeDescription>();
                    for (FileIndex fi : state2)
                        cmpResult.add( new ChangeDescription( fi, TypeOfChange.NOT_CHANGED ) );
                }

                srvc.saveDescription( state2, target );
            } catch (ServiceException e) {
                e.printStackTrace();
            }

            // .. (parent directory)
            String encodedUrl;
            Integer slashPos;
            slashPos = dirName.lastIndexOf( File.separator, dirName.length() - 2 );  // -2 is needed to skip separator ('\') at the end of URI
            if (slashPos != -1) {
                encodedUrl = URLEncoder.encode( dirName.substring( 0, slashPos ), encoding );
                writer.println( "<tr>\n" +
                                "   <td />\n" +
                                "   <td><a href=\"" + req.getContextPath() + "file-tree?path=" + encodedUrl + "\">[..]</a></td>\n" +
                                "</tr>" );
            }

            // list other files (with difference report)
            if (cmpResult.isEmpty())
                writer.println( "<tr><td /><td><h3 class=\"description\">(Empty directory)</h3></td></tr>" );
            else {
                String fileName;
                for (ChangeDescription cd : cmpResult) {
                    fileName = cd.getFilename();
                    encodedUrl = URLEncoder.encode( dirName + File.separator + fileName, encoding );
                    writer.println("<tr>");
                    if (cd.isFile())
                        writer.println( "<td><img src=\"" + imgDir + "Type-Document.ico\" " +
                                                "alt=\"T:Document\" " +
                                                "bgcolor=\"white\" " +
                                                "width=\"16px\" " +
                                                "height=\"16px\" /></td>\n" +
                                        "<td>" + fileName + "</td>" );
                    else
                        writer.println( "<td><img src=\"" + imgDir + "Type-Folder.ico\" " +
                                                "alt=\"T:Directory\" " +
                                                "bgcolor=\"yellow\" " +
                                                "width=\"16px\" " +
                                                "height=\"16px\" /></td>\n" +
                                        "<td><a href=\"" + req.getContextPath() + "file-tree?path=" + encodedUrl + "\">" + fileName + "</a></td>" );

                    // visual representation of a change
                    String iconName = imgDir,
                           associatedColor = null;
                    switch (cd.getChange()) {
                        case NOT_CHANGED:
                            iconName = imgDir + "File-Not-changed.ico";
                            associatedColor = "white";
                            break;
                        case MODIFIED:
                            iconName = imgDir + "File-Modified.ico";
                            associatedColor = "yellow";
                            break;
                        case CREATED:
                            iconName = imgDir + "File-Created.ico";
                            associatedColor = "green";
                            break;
                        case DELETED:
                            iconName = imgDir + "File-Deleted.ico";
                            associatedColor = "red";
                            break;
                        case ROLLBACKED:
                            iconName = imgDir + "File-Rollbacked.ico";
                            associatedColor = "blue";
                            break;
                    }
                    writer.println( "<td><img src=\"" + iconName + "\" " +
                                            "alt=\"" + cd + "\" " +
                                            "bgcolor=\"" + associatedColor + "\" " +
                                            "width=\"16px\" " +
                                            "height=\"16px\" ><h3 class=\"description\">" + cd + "</h3></img></td>\n" +
                                    "</tr>" );
                }
            }

            writer.println( tailFragment );
        } finally {
            writer.close();
        }
    }

    /**
     *
     * @return Welcome message
     */
    public static String getMessage() {
        return "Welcome, Dear Visitor!";
    }
}
