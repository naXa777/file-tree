package com.exadel.filetree;

import org.springframework.stereotype.Service;

import javax.sql.DataSource;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.Set;

/**
 * Created with IntelliJ IDEA.
 * User: naXa!
 * Date: 20.06.13
 * Time: 21:38
 */
@Service
public class DBService extends AbstractService {
    DataSource ds;
    Connection conn = null;

    /**
     * Default constructor.
     */
    public DBService() {
        super();
    }

    public DataSource getDataSource() {
        return ds;
    }

    /**
     * Setter for Data Source (linked with Spring context).
     *
     * @param ds initialized data source
     */
    public void setDataSource(DataSource ds) {
        this.ds = ds;
    }

    /**
     * @param dir reference to a directory
     * @return <code>TRUE</code>, if description for directory is present in database; <code>FALSE</code> otherwise
     * @throws ServiceException
     */
    @Override
    public boolean wasSerialized(File dir) throws ServiceException {
        if (dir == null)
            throw new ServiceException( "Directory not found." );
        boolean result = false;
        PreparedStatement stmt = null;

        try {
            conn = ds.getConnection();//DriverManager.getConnection( url, userName, password );

            stmt = conn.prepareStatement( "SELECT COUNT(ID) AS N FROM root_folder " +
                                          "WHERE (Path = ?)" );
            stmt.setString( 1, dir.getAbsolutePath() );
            ResultSet rs = stmt.executeQuery();

            result = (rs.next() && (rs.getInt("N") > 0));
            stmt.close();
            conn.close();
        } catch (SQLException exc) {
            throw new ServiceException( "Failed to open connection or execute SQL query.", exc );
        } finally {
            try {
                if (stmt != null && !stmt.isClosed())
                    stmt.close();
                if (conn != null && !conn.isClosed())
                    conn.close();
            } catch (SQLException exc) {
                throw new ServiceException( "Failed to close SQL query and terminate SQL connection." );
            }
        }

        return result;
    }

    /**
     * Serialization. Method writes directory description (current state) into DB.
     *
     * @param description description of directory content
     * @param dir reference to a directory
     * @throws ServiceException
     */
    @Override
    public void saveDescription(Set<FileIndex> description, File dir) throws ServiceException {
        final String clearQuery = "CALL clearFolder(?)",
                    insertQuery = "CALL insertFile(?, ?, ?, ?, ?)";
        final String parentName = dir.getAbsolutePath();

        try {
            conn = ds.getConnection();
        } catch (SQLException e) {
            throw new ServiceException( "Failed to open a new connection to DB.", e );
        }

        // clear old file indices
        PreparedStatement stmt = null;
        try {
            stmt = conn.prepareStatement( clearQuery );
            stmt.setString(1, parentName);
            stmt.execute();
        } catch (SQLException exc) {
            throw new ServiceException( "Failed to execute SQL query.", exc);
        } finally {
            try {
                if (stmt != null && !stmt.isClosed())
                    stmt.close();
            } catch (SQLException exc) {
                throw new ServiceException( "Failed to close SQL statement.", exc);
            }
        }

        for (FileIndex fi : description) {
            try {
                // insert - into file_index
                stmt = conn.prepareStatement( insertQuery );
                stmt.setString( 1, fi.getFullName() );
                    // saving date-time:
                SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
                String currDateTime = sdf.format( fi.getLastModif() );
                stmt.setString( 2, currDateTime );
                stmt.setLong(   3, fi.getSize() );
                stmt.setString( 4, fi.isFile()? "File" : "Directory" );
                stmt.setString( 5, parentName );
                stmt.execute();
            } catch (SQLException exc) {
                throw new ServiceException( "Failed to execute SQL query.", exc);
            } finally {
                try {
                    if (stmt != null && !stmt.isClosed())
                        stmt.close();
                } catch (SQLException exc) {
                    throw new ServiceException( "Failed to close SQL statement.", exc);
                }
            }
        }

        // The End
        try {
            if (conn != null && !conn.isClosed())
                conn.close();
        } catch (SQLException exc) {
            throw new ServiceException( "Failed to terminate SQL connection.", exc);
        }
    }

    /**
     * Deserialization. Method reads previous directory state from DB,
     * and returns it as HashSet<FileIndex>.
     *
     * @param dir reference to a directory
     * @return description of directory content
     * @throws ServiceException
     */
    @Override
    public Set<FileIndex> loadDescription(File dir) throws ServiceException {
        Set<FileIndex> result = new HashSet<FileIndex>();
        final String query = "SELECT Filename, LastModification, Size, Type " +
                             "FROM file_index AS fi, root_folder AS rf " +
                             "WHERE ((fi.Parent = rf.ID) AND (rf.Path = ?))";
        PreparedStatement stmt = null;

        try {
            conn = ds.getConnection(); //DriverManager.getConnection( url, userName, password );

                // select all files
            stmt = conn.prepareStatement( query );
            stmt.setString( 1, dir.getAbsolutePath() );
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String filename = rs.getString( "Filename" );
                java.util.Date lastModif = rs.getTimestamp( "LastModification" );
                String type = rs.getString( "Type" );
                Long size = 0L;
                if (type.equals("File"))
                    size = rs.getLong( "Size" );

                result.add( new FileIndex( filename, lastModif, size, (type.equals("File") ) ) );
            }
        } catch (SQLException exc) {
            throw new ServiceException( "Failed to open connection or execute SQL query.", exc );
        } finally {
            try {
                if (stmt != null && !stmt.isClosed())
                    stmt.close();
                if (conn != null && !conn.isClosed())
                    conn.close();
            } catch (SQLException exc) {
                throw new ServiceException( "Failed to close SQL query and terminate SQL connection." );
            }
        }

        return result;
    }
}
