package com.exadel.filetree;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.Set;

/**
 * Created with IntelliJ IDEA.
 * User: naXa!
 * Date: 20.06.13
 * Time: 22:02
 */
public abstract class AbstractService implements IService {
    private static final PrintStream cons = System.out;
    protected File directory;

    public AbstractService() {
        directory = null;
    }

    /**
     * Method <code>describeIt</code> describes all files
     * and directories in root directory <code>dir</code>;
     *
     *
     * @param dir Root directory for describing
     * @return A set of descriptions for found files and directories
     * @throws java.io.IOException
     */
    @Override
    public Set<FileIndex> describeIt(File dir) throws IOException {
        if (dir == null)
            return null;
        directory = dir;
        Set<FileIndex> result = new HashSet<FileIndex>();

        if (dir.isDirectory()) {
            File content[] = dir.listFiles();
            for (File f : content)
                result.add( new FileIndex( f ) );
            return result;
        } else {
            return null;
        }
    }

    /**
     * A simple wrapper invoking previous method with default directory.
     * @throws IOException
     */
    public Set<FileIndex> describeIt() throws IOException {
        return describeIt( directory );
    }

    /**
     * Method tells us whether directory was described before or not.
     *
     * @return  <code>TRUE</code>, if directory wasn't described earlier;
     *          <code>FALSE</code> otherwise.
     */
    @Override
    public abstract boolean wasSerialized(File dir);

    public boolean wasSerialized() {
        return (wasSerialized( directory ));
    }


    /**
     * Comparison of two states: state1 & state2;
     * @param state1 Previous state
     * @param state2 Current state
     * @return Complete report about file changes to (the) console.
     */
    @Override
    public Set<ChangeDescription> compareStates(Set<FileIndex> state1, Set<FileIndex> state2) {
        if (state1 == null || state2 == null)
            return null;
        Set<ChangeDescription> result = new HashSet<ChangeDescription>();

        for (FileIndex fileIndex : state2) {
            if ( fileIndex.getFilename().isEmpty() )  // skip empty record
                continue;
            if (state1.contains( fileIndex )) {
                for (FileIndex alterFileIndex : state1)
                    if (fileIndex.equals( alterFileIndex )) {
                        if (fileIndex.getLastModif().after(alterFileIndex.getLastModif()))
                            result.add( new ChangeDescription( alterFileIndex.getFilename(), TypeOfChange.MODIFIED ) );
                        else if (fileIndex.getLastModif().equals( alterFileIndex.getLastModif() ))
                            result.add( new ChangeDescription( alterFileIndex.getFilename(), TypeOfChange.NOT_CHANGED ) );
                        else    // дата изменения перенеслась в прошлое
                            result.add( new ChangeDescription( alterFileIndex.getFilename(), TypeOfChange.RESTORED ) );
                    }
            } else
                result.add( new ChangeDescription( fileIndex.getFilename(), TypeOfChange.CREATED ) );
        }
        for (FileIndex fileIndex : state1)
            if ( !state2.contains( fileIndex ) )
                result.add( new ChangeDescription( fileIndex.getFilename(), TypeOfChange.DELETED ) );

        return result;
    }

    /**
     * @return Name of a directory, specified by user during creation of the class
     */
    public String getDirectoryName() {
        return directory.getName();
    }

    @Override
    public abstract void saveDescription(Set<FileIndex> description, File dir) throws IOException;

    @Override
    public abstract Set<FileIndex> loadDescription(File dir) throws IOException;

    /**
     *
     * @param description
     * @throws IOException
     */
    public void saveDescription(Set<FileIndex> description) throws IOException {
        saveDescription( description, directory );
    }

    /**
     *
     * @return
     * @throws IOException
     */
    public Set<FileIndex> loadDescription() throws IOException {
        return loadDescription( directory );
    }
}
